# Generated by Django 4.2.7 on 2025-06-25 23:34

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('paciente', 'Paciente'), ('terapeuta', 'Terapeuta'), ('admin', 'Administrador')], default='paciente', max_length=20)),
                ('phone', models.CharField(blank=True, max_length=15)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Therapist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specialty', models.CharField(choices=[('ansiedad', 'Trastornos de Ansiedad'), ('depresion', 'Depresión'), ('trauma', 'Trauma y TEPT'), ('pareja', 'Terapia de Pareja'), ('familia', 'Terapia Familiar'), ('adolescentes', 'Adolescentes'), ('adicciones', 'Adicciones'), ('general', 'Psicología General')], max_length=20)),
                ('license_number', models.CharField(max_length=50, unique=True)),
                ('years_experience', models.IntegerField(default=0)),
                ('bio', models.TextField(blank=True)),
                ('hourly_rate', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('is_available', models.BooleanField(default=True)),
                ('monday_available', models.BooleanField(default=True)),
                ('tuesday_available', models.BooleanField(default=True)),
                ('wednesday_available', models.BooleanField(default=True)),
                ('thursday_available', models.BooleanField(default=True)),
                ('friday_available', models.BooleanField(default=True)),
                ('saturday_available', models.BooleanField(default=False)),
                ('sunday_available', models.BooleanField(default=False)),
                ('start_time', models.TimeField(default='09:00')),
                ('end_time', models.TimeField(default='18:00')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='therapist_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('initial_test_completed', models.BooleanField(default=False)),
                ('anxiety_level', models.IntegerField(blank=True, help_text='1-10 scale', null=True)),
                ('depression_level', models.IntegerField(blank=True, help_text='1-10 scale', null=True)),
                ('stress_level', models.IntegerField(blank=True, help_text='1-10 scale', null=True)),
                ('main_concerns', models.TextField(blank=True)),
                ('previous_therapy', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patient_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
